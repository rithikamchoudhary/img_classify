from sklearn.metrics import confusion_matrix, classification_report
from PIL import Image

# Evaluate model on test data
test_loss, test_acc = model.evaluate(test_generator)
print('Test Loss:', test_loss)
print('Test Accuracy:', test_acc)

# Predict classes for test data
y_pred = model.predict(test_generator)
y_pred = np.argmax(y_pred, axis=1)

# Get true classes for test data
y_true = test_generator.classes

# Print classification report and confusion matrix
print('Classification Report:')
print(classification_report(y_true, y_pred))
print('Confusion Matrix:')
print(confusion_matrix(y_true, y_pred))

# Analyze performance of each class
val_data = test_data
class_names = list(train_generator.class_indices.keys())
print('Class Names:', class_names)

report = classification_report(y_true, y_pred, output_dict=True,  zero_division=0)
performance = {}
for i in range(len(class_names)):
    class_name = class_names[i]
    class_performance = report[str(i)]
    performance[class_name] = {'precision': class_performance['precision'],
                               'recall': class_performance['recall'],
                               'f1-score': class_performance['f1-score'],
                               'support': class_performance['support']}
    print('Performance of Class', class_name, ':', performance[class_name])
    
# Get the best and worst performing classes based on f1-score
sorted_performance = sorted(performance.items(), key=lambda x: x[1]['f1-score'], reverse=True)
best_class = sorted_performance[0][0]
worst_class = sorted_performance[-1][0]
print('Best Performing Class:', best_class)
print('Worst Performing Class:', worst_class)

# Find the indices of the worst predicted images for the worst performing class
worst_class_idx = np.where((y_true == train_generator.class_indices[worst_class]) & (y_pred != train_generator.class_indices[worst_class]))[0]
worst_class_pred = y_pred[worst_class_idx]
worst_class_true = y_true[worst_class_idx]

# Print the worst predicted images for the worst performing class
num_worst_images = 2
for i in range(num_worst_images):
    img_idx = worst_class_idx[i]
    img_path = test_generator.filepaths[img_idx]
    img = Image.open(img_path)
    img.show()
    print('True Label:', class_names[worst_class_true[i]])
    print('Predicted Label:', class_names[worst_class_pred[i]])