from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten, Dropout
from tensorflow.keras.regularizers import l2

from keras.models import Sequential
from keras.layers import Dense, Conv2D, Flatten, Dropout, MaxPooling2D

input_shape=(150,150,3)
# Create a sequential model
model = Sequential()

# Add a convolutional layer with 32 filters, 3x3 kernel size, and ReLU activation function
model.add(Conv2D(32, (3, 3), activation='relu', input_shape=input_shape))

# Add a max pooling layer with 2x2 pool size
model.add(MaxPooling2D((2, 2)))

# Add another convolutional layer with 64 filters, 3x3 kernel size, and ReLU activation function
model.add(Conv2D(64, (3, 3), activation='relu'))

# Add another max pooling layer with 2x2 pool size
model.add(MaxPooling2D((2, 2)))

# Add a third convolutional layer with 128 filters, 3x3 kernel size, and ReLU activation function
model.add(Conv2D(128, (3, 3), activation='relu'))

# Flatten the output of the convolutional layers
model.add(Flatten())

# Add a fully connected layer with 512 units and ReLU activation function
model.add(Dense(512, activation='relu', kernel_regularizer=l2(0.001)))

# Add dropout layer to prevent overfitting
model.add(Dropout(0.5))

# Add another fully connected layer with 256 units and ReLU activation function
model.add(Dense(256, activation='relu', kernel_regularizer=l2(0.001)))

# Add another dropout layer
model.add(Dropout(0.5))

# Add the output layer with sigmoid activation function for binary classification
model.add(Dense(1, activation='sigmoid'))

# Print the model summary
model.summary()